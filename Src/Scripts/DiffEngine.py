# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _DiffEngine
else:
    import _DiffEngine

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def GetDWORD(a, index):
    return _DiffEngine.GetDWORD(a, index)
class Storage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, DatabaseName=None):
        _DiffEngine.Storage_swiginit(self, _DiffEngine.new_Storage(DatabaseName))
    __swig_destroy__ = _DiffEngine.delete_Storage

# Register Storage in _DiffEngine:
_DiffEngine.Storage_swigregister(Storage)

class IDAController(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, StorageDB=None):
        _DiffEngine.IDAController_swiginit(self, _DiffEngine.new_IDAController(StorageDB))

    def GetClientAnalysisInfo(self):
        return _DiffEngine.IDAController_GetClientAnalysisInfo(self)

    def GetClientFileInfo(self):
        return _DiffEngine.IDAController_GetClientFileInfo(self)

    def DumpAnalysisInfo(self):
        return _DiffEngine.IDAController_DumpAnalysisInfo(self)

    def DumpBlockInfo(self, block_address):
        return _DiffEngine.IDAController_DumpBlockInfo(self, block_address)

    def RemoveFromFingerprintHash(self, address):
        return _DiffEngine.IDAController_RemoveFromFingerprintHash(self, address)

    def GetBlockAddress(self, address):
        return _DiffEngine.IDAController_GetBlockAddress(self, address)

    def GetMappedAddresses(self, address, type):
        return _DiffEngine.IDAController_GetMappedAddresses(self, address, type)

    def GetDisasmLines(self, start_addr, end_addr):
        return _DiffEngine.IDAController_GetDisasmLines(self, start_addr, end_addr)

    def FreeDisasmLines(self):
        return _DiffEngine.IDAController_FreeDisasmLines(self)

    def JumpToAddress(self, address):
        return _DiffEngine.IDAController_JumpToAddress(self, address)
    __swig_destroy__ = _DiffEngine.delete_IDAController

# Register IDAController in _DiffEngine:
_DiffEngine.IDAController_swigregister(IDAController)

class DiffMachine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, the_source=None, the_target=None):
        _DiffEngine.DiffMachine_swiginit(self, _DiffEngine.new_DiffMachine(the_source, the_target))

    def ShowDiffMap(self, unpatched_address, patched_address):
        return _DiffEngine.DiffMachine_ShowDiffMap(self, unpatched_address, patched_address)

    def Analyze(self):
        return _DiffEngine.DiffMachine_Analyze(self)

    def AnalyzeFunctionSanity(self):
        return _DiffEngine.DiffMachine_AnalyzeFunctionSanity(self)

    def GetMatchAddr(self, index, address):
        return _DiffEngine.DiffMachine_GetMatchAddr(self, index, address)

    def GetUnidentifiedBlockCount(self, index):
        return _DiffEngine.DiffMachine_GetUnidentifiedBlockCount(self, index)

    def GetUnidentifiedBlock(self, index, i):
        return _DiffEngine.DiffMachine_GetUnidentifiedBlock(self, index, i)

    def Load(self, InputDB):
        return _DiffEngine.DiffMachine_Load(self, InputDB)

    def Save(self, OutputDB, pTheSourceSelectedAddresses=None, pTheTargetSelectedAddresses=None):
        return _DiffEngine.DiffMachine_Save(self, OutputDB, pTheSourceSelectedAddresses, pTheTargetSelectedAddresses)
    __swig_destroy__ = _DiffEngine.delete_DiffMachine

# Register DiffMachine in _DiffEngine:
_DiffEngine.DiffMachine_swigregister(DiffMachine)

class DarunGrim(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def SetLogParameters(self, ParamLogOutputType, ParamDebugLevel, LogFile=None):
        return _DiffEngine.DarunGrim_SetLogParameters(self, ParamLogOutputType, ParamDebugLevel, LogFile)

    def SetIDAPath(self, path, is_64):
        return _DiffEngine.DarunGrim_SetIDAPath(self, path, is_64)

    def AcceptIDAClientsFromSocket(self, storage_filename=None):
        return _DiffEngine.DarunGrim_AcceptIDAClientsFromSocket(self, storage_filename)

    def PerformDiff(self, *args):
        return _DiffEngine.DarunGrim_PerformDiff(self, *args)

    def AddSrcDumpAddress(self, address):
        return _DiffEngine.DarunGrim_AddSrcDumpAddress(self, address)

    def AddTargetDumpAddress(self, address):
        return _DiffEngine.DarunGrim_AddTargetDumpAddress(self, address)

    def EnableLogType(self, type):
        return _DiffEngine.DarunGrim_EnableLogType(self, type)

    def SetSourceFilename(self, source_filename):
        return _DiffEngine.DarunGrim_SetSourceFilename(self, source_filename)

    def SetTargetFilename(self, target_filename):
        return _DiffEngine.DarunGrim_SetTargetFilename(self, target_filename)

    def Load(self, storage_filename):
        return _DiffEngine.DarunGrim_Load(self, storage_filename)

    def JumpToAddresses(self, source_address, target_address):
        return _DiffEngine.DarunGrim_JumpToAddresses(self, source_address, target_address)

    def ColorAddress(self, index, start_address, end_address, color):
        return _DiffEngine.DarunGrim_ColorAddress(self, index, start_address, end_address, color)

    def SetDatabase(self, OutputDB):
        return _DiffEngine.DarunGrim_SetDatabase(self, OutputDB)

    def StartIDAListenerThread(self, port):
        return _DiffEngine.DarunGrim_StartIDAListenerThread(self, port)

    def StartIDAListener(self, port):
        return _DiffEngine.DarunGrim_StartIDAListener(self, port)

    def SetSourceIDASession(self, identity):
        return _DiffEngine.DarunGrim_SetSourceIDASession(self, identity)

    def SetTargetIDASession(self, identity):
        return _DiffEngine.DarunGrim_SetTargetIDASession(self, identity)

    def SetLogFilename(self, LogFilename):
        return _DiffEngine.DarunGrim_SetLogFilename(self, LogFilename)

    def GenerateSourceDGFFromIDA(self, output_filename, log_filename, is_64):
        return _DiffEngine.DarunGrim_GenerateSourceDGFFromIDA(self, output_filename, log_filename, is_64)

    def GenerateTargetDGFFromIDA(self, output_filename, log_filename, is_64):
        return _DiffEngine.DarunGrim_GenerateTargetDGFFromIDA(self, output_filename, log_filename, is_64)

    def GenerateDGFFromIDA(self, ida_filename, StartAddress, EndAddress, output_filename, log_filename, is_64):
        return _DiffEngine.DarunGrim_GenerateDGFFromIDA(self, ida_filename, StartAddress, EndAddress, output_filename, log_filename, is_64)

    def ConnectToDarunGrim(self, ida_filename):
        return _DiffEngine.DarunGrim_ConnectToDarunGrim(self, ida_filename)

    def GetIDALogFilename(self):
        return _DiffEngine.DarunGrim_GetIDALogFilename(self)

    def SetAutoMode(self, mode):
        return _DiffEngine.DarunGrim_SetAutoMode(self, mode)

    def __init__(self):
        _DiffEngine.DarunGrim_swiginit(self, _DiffEngine.new_DarunGrim())
    __swig_destroy__ = _DiffEngine.delete_DarunGrim

# Register DarunGrim in _DiffEngine:
_DiffEngine.DarunGrim_swigregister(DarunGrim)



